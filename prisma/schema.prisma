generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model Config {
    id             Int      @id @default(0)
    formChannelId  String   @default("") // Channel where the form button to fill the form will be sent
    formMessageId  String   @default("") // Message id where the form button to fill the form will be sent (for clean up)
    formCategoryId String   @default("") // Category where the form will be created
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

enum FormStatus {
    OPEN
    CLOSED
}

model Form {
    id     Int        @id @default(autoincrement())
    title  String     @unique
    active Boolean    @default(false)
    status FormStatus @default(OPEN)

    resultChannelId String @default("") // Channel where the result of the form will be sent

    responses  UserResponse[]
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    questions  FormQuestion[] @relation("FormQuestion")
    categories FormCategory[] @relation("FormCategory")

    // Ignored
    cron FormCron?
}

model FormCron {
    id        Int      @id @default(autoincrement())
    formId    Int      @unique
    form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    cron      String   @default("") // Cron expression
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FormCategory {
    id           Int            @id @default(autoincrement())
    name         String         @default("")
    icon         String         @default("")
    formId       Int
    form         Form           @relation("FormCategory", fields: [formId], references: [id], onDelete: Cascade)
    questions    FormQuestion[] @relation("FormCategory")
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    UserResponse UserResponse[]
}

model FormQuestionCoord {
    id Int @id @default(autoincrement())

    FormQuestion FormQuestion? @relation("FormQuestionCoord", fields: [questionId], references: [id], onDelete: Cascade)
    questionId   Int?

    x      Int @default(0)
    y      Int @default(0)
    width  Int @default(0)
    height Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FormQuestionChoice {
    id         Int           @id @default(autoincrement())
    category   String        @default("default")
    questionId Int?
    question   FormQuestion? @relation("FormChoices", fields: [questionId], references: [id], onDelete: Cascade)
    values     String[]
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
}

enum FormQuestionLinkType {
    NONE
    NOT_EQUAL
    TAKE_ANSWER
}

enum FormQuestionType {
    MULTIPART
    TEXT
    SELECT
    BUTTON
}

model FormQuestion {
    id             Int              @id @default(autoincrement())
    ref            Int              @default(0) // Reference of the question
    formId         Int
    form           Form             @relation("FormQuestion", fields: [formId], references: [id], onDelete: Cascade)
    categoryId     Int
    category       FormCategory     @relation("FormCategory", fields: [categoryId], references: [id], onDelete: Cascade)
    parentId       Int?
    parentQuestion FormQuestion?    @relation("SubQuestions", fields: [parentId], references: [id])
    questions      FormQuestion[]   @relation("SubQuestions")
    // Type must been type of interaction: select, button
    type           FormQuestionType @default(TEXT)
    title          String           @default("")
    regex          String           @default("") // Regex to validate the answer
    style          String           @default("") // Color of the question

    // Link to another question
    linkType FormQuestionLinkType @default(NONE) // Link type of the question
    linkedId Int?
    linked   FormQuestion?        @relation("LinkedQuestions", fields: [linkedId], references: [id])

    choices FormQuestionChoice[] @relation("FormChoices")

    points String @default("") // Points of the question: (ex: +2, -3, *2)

    nb_answers Int      @default(1) // Number of answers to the question
    answers    String[] // Answers of the question

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    coordinates FormQuestionCoord[] @relation("FormQuestionCoord")

    // Ignored
    submissions UserSubmission[]
    links       FormQuestion[]   @relation("LinkedQuestions")
}

enum UserResponseStatus {
    PENDING
    COMPLETED
}

model UserResponse {
    id         Int           @id @default(autoincrement())
    formId     Int           @default(0) // Form id where the user has answered
    form       Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
    categoryId Int?
    category   FormCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    nextIndex   Int              @default(0) // Index of the next question to answer
    submissions UserSubmission[]

    userId    String @unique
    channelId String @default("") // Channel id where the user is completing the form

    respThreadId  String @default("") // Channel id where the user has the answer of the sform
    respMessageId String @default("") // Message id where the user has the answer of the sform

    status    UserResponseStatus @default(PENDING) // pending, completed
    score     Int                @default(0) // Score of the user 1 point per correct answer
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
}

model UserSubmission {
    id         Int          @id @default(autoincrement())
    userRespId Int // User response id where the user has answered
    userResp   UserResponse @relation(fields: [userRespId], references: [id], onDelete: Cascade)
    questionId Int // Question id where the user has answered
    question   FormQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    messageId  String       @default("") // Message id where the user has answered
    answers    String[] // Answer of the user
    done       Boolean      @default(false) // If the user has answered the question with all the subquestions
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
}
